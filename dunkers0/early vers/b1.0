#if defined(linux) || defined(_WIN32)
#include <GL/glut.h>    /*Для Linux и Windows*/
#else
#include <GLUT/GLUT.h>  /*Для Mac OS*/
#endif
#include <unistd.h>
#include <iostream>
#define height 720
#define width 1366
#define BLUE 0.3, 0.8, 0.8
void reshape(int w, int h)
{
        glViewport(0, 0, w, h);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        gluOrtho2D(0, w, 0, h);
        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();
}
int jmp=0,sd=0,jmp1=0,sd1=0;

void display()
{
        glClear(GL_COLOR_BUFFER_BIT);
        glBegin(GL_QUADS);
        glColor3f(0.7,0.7,0.7);
        glVertex2i(0, 150);
        glVertex2i(0, 0);
        glVertex2i(width, 0);
        glVertex2i(width, 150);
        glEnd();
        glBegin(GL_QUADS);//pl 1
        glColor3f(1.0,0.0,0.0);
        glVertex2i(0+sd, 150+jmp);
        glVertex2i(0+sd, 300+jmp);
        glVertex2i(100+sd, 300+jmp);
        glVertex2i(100+sd, 150+jmp);
        glEnd();
        glBegin(GL_QUADS);//pl 2
        glColor3f(0.0,1.0,0.0);
        glVertex2i(width-200+sd1, 150+jmp1);
        glVertex2i(width-200+sd1, 300+jmp1);
        glVertex2i(width-100+sd1, 300+jmp1);
        glVertex2i(width-100+sd1, 150+jmp1);
        glEnd();
        glBegin(GL_QUADS);//b 2
        glColor3f(0.0,0.0,1.0);
        glVertex2i(0, 375);
        glVertex2i(0, 425);
        glVertex2i(50, 425);
        glVertex2i(50, 375);
        glBegin(GL_QUADS);//b 1
        glColor3f(0.0,0.0,1.0);
        glVertex2i(width-100, 375);
        glVertex2i(width-100, 425);
        glVertex2i(width-150, 425);
        glVertex2i(width-150, 375);
        glEnd();
        glutSwapBuffers();
}
int dlr[2]={0,0},evh=0,count=0;
void up(int num){
	if(num==1){
		if(!jmp) dlr[0]=1;
	}
	else{
		if(!jmp1) dlr[1]=1;
	}
}
void side(int x,int num){
	if(num ==1){if(((sd>0) || (x>0))&&((sd<width-200)||(x<0))) sd+=x*10;}
	else if(((sd1<0)||(x<0))&&((x>0)||(width-200+sd1>0))) sd1+=x*10;
	glutPostRedisplay(); 
}
int checkWin(){
	if((sd>width-200)&&(jmp>50)) return 1;
	if((width-100+sd1>0)&&(jmp1>50)) return 2;
	return 0;
}
void timef(int value){
	if(!dlr[0]){
		if(jmp>0){ jmp-=10; glutPostRedisplay(); }
	}
	else{
		if(jmp < 90){ jmp+=20; glutPostRedisplay(); }
		else dlr[0]=0;
	}
	if(!dlr[1]){
		if(jmp1>0){ jmp1-=10; glutPostRedisplay(); }
	}
	else{
		if(jmp1 < 90){ jmp1+=20; glutPostRedisplay(); }
		else dlr[1]=0;
	}
	switch(checkWin()){
		case 0:break;
		case 1:std::cout<<"Player 1 won!\n";exit(0);break;
		case 2:std::cout<<"Player 2 won!\n";exit(0);break;
	}
	glutTimerFunc (40, timef, 0);
}
void processNormalKeys(unsigned char key, int x, int y) {
	switch(key){
		case 27: exit(0);//esc
		case 87:case 119: up(1); break;//w
		case 65:case 97: side(-1,1);break;//a
		case 68:case 100: side(1,1);break;//d
		case 73:case 105: up(2); break;//i
		case 74:case 106: side(-1,2);break;//j
		case 76:case 108: side(1,2);break;//l
	}
	glutPostRedisplay(); 
}

int main (int argc, char * argv[])
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA);
	glutInitWindowSize(width,height);
	glutCreateWindow("OpenGL lesson 1");
	glutKeyboardFunc(processNormalKeys);
	glutReshapeFunc(reshape);
	glutDisplayFunc(display);
	glutTimerFunc (40, timef, 0);
	glutMainLoop();
	return 0;
}

