#if defined(linux) || defined(_WIN32)
#include <GL/glut.h>    /*Для Linux и Windows*/
#else
#include <GLUT/GLUT.h>  /*Для Mac OS*/
#endif
#include <unistd.h>
#include <stdio.h>
#define height 720
#define width 1366
#define BLUE 0.3, 0.8, 0.8
void reshape(int w, int h)
{
        glViewport(0, 0, w, h);
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();
        gluOrtho2D(0, w, 0, h);
        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();
}
int jmp=0,sd=0;
float clr=0.0;
void display()
{
        glClear(GL_COLOR_BUFFER_BIT);
        glBegin(GL_QUADS);
        glColor3f(0.7,0.7,0.7);
        glVertex2i(0, 150);
        glVertex2i(0, 0);
        glVertex2i(width, 0);
        glVertex2i(width, 150);
        glEnd();
        glBegin(GL_QUADS);//pl 1
        glColor3f(0.5,1.0,1.0);
        glVertex2i(0+sd, 150+jmp);
        glVertex2i(0+sd, 300+jmp);
        glVertex2i(100+sd, 300+jmp);
        glVertex2i(100+sd, 150+jmp);
        glEnd();
        glBegin(GL_QUADS);//pl 2
        glColor3f(1.0,0.5,0.5);
        glVertex2i(width-200-sd, 150+jmp);
        glVertex2i(width-200-sd, 300+jmp);
        glVertex2i(width-100-sd, 300+jmp);
        glVertex2i(width-100-sd, 150+jmp);
        glEnd();
        glutSwapBuffers();
}
int dlr=0,evh=0,count=0;
void up(int x1, int y1){
	if(!jmp) dlr=1;
}
void side(int x){
	evh=x;
}
void timef(int value){
	printf("dfs");
	if(!dlr){
		if(jmp>0){ jmp-=10; glutPostRedisplay(); }
	}
	else{
		if(jmp < 90){ jmp+=20; glutPostRedisplay(); }
		else dlr=0;
	}
	if(evh){
		if(evh && ((evh>0) || (sd>0))){
			count++;
			if(count > 20) {evh = 0;count=0;}
			else{sd+=evh*5; glutPostRedisplay(); }
		}
	}
	else{

	}
	glutTimerFunc (40, timef, 0);
}
void processNormalKeys(unsigned char key, int x, int y) {
	switch(key){
		case 27: exit(0);//esc
		case 87:case 119: up(x,y); break;//w
		case 65:case 97: side(-1);break;//a
		case 68:case 100: side(1);break;//d
	}
	glutPostRedisplay(); 
}

int main (int argc, char * argv[])
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA);
	glutInitWindowSize(width,height);
	glutCreateWindow("OpenGL lesson 1");
	glutKeyboardFunc(processNormalKeys);
	glutReshapeFunc(reshape);
	glutDisplayFunc(display);
	glutTimerFunc (40, timef, 0);
	glutMainLoop();
	return 0;
}

